----

Sys. Structure Overview:
  1. Nix Package Manager: 
    Install, Build, Manage Packages
    Purely Functional
    Supports Profiles, Generations, and Rollbacks
  2. Nix Expression Language:
    Describes Packages & Environments
    Defines Dependencies, Build Steps, and Configurations
  3. Nix Store:
    Central Database for Installed Packages and Artifacts
    Immutable paths, made of hashes.
  4. Nix Flakes (was channels, but they're deprecated):
    Mechanism to retrieve and manage package sets.
  5. Garbage Collector:
    Cleans up unreferenced packages from Nix store.

----

System Management:

  Remove Older Generations:
    sudo nix-collect-garbage  --delete-old
    sudo /run/current-system/bin/switch-to-configuration boot
      NOTE: Rebuild boot after (nixos-rebuild boot)

  Nixpkgs Version: home-manager --version
  Nixos Version: nixos-version

  nix-channel (depricated):
    sudo nix-channel --add
    sudo nix-channel --update
    sudo nix-channel --list
    sudo nix-channel --remove
  Update nixpkgs: nix-channel --update

  Rebuild (sudo nixos-rebuild):
    test - build; switch; don't make boot
    boot - build; don't switch; make boot
    switch - build; switch; make boot
    build - don't switch; don't make boot

  Updates:
    Update: nix-channel --update nixos; nixos-rebuild switch

  Apocalypse:
    Rebuild Bootloader: nixos-rebuild switch --install-bootloader

  Garbage Collection(?): 
    nix-collect-garbage -d

  Flakes:
    Fix Flakes: sudo nix-store --repair --verify --check-contents
    Make Template: nix flake init

  ?: nix-env -q

  Debug Rebuild: journalctl -xe --unit home-manager-diddy (find out what this does_

----

Sys. Coding:

  Let: Instantiate Variables
  In: Define Logic

----

Fundamentals:

  For: Loop for a number of steps.
  While: Loop until a condition is met.

  Symlinks: 
    ln -s ~/nixfiles/nixos ~/Documents/nix_config
    ln -s ~/nixfiles/nixos/home.nix ~/nixfiles/nixpkgs/

  Gitting:
    echo "# PARASOL" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git branch -M main
    git remote add origin git@github.com:rocket186/PARASOL.git
    git push -u origin main
    If it's being ridiculous cos there's two accounts, may need to specify account based on .ssh/config host, like this:
      git remote set-url origin git@github.com-UnicornPrism:UnicornPrism/broadsword.git
        This may also be because rocket186 comes first in the .ssh/config file...

----

Python:
  Shebang: #!/usr/bin/env python

----


